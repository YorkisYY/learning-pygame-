import pygame
import random
import os

FPS = 60
WIDTH = 500
HEIGHT = 600

WHITE = (255, 255, 255)
GREEN =(0, 255, 0)
RED = (255, 0, 0)
YELLOW=(255, 255, 0)
BLACK=(0, 0, 0)

#instalization & creat window

pygame.init()
screen = pygame.display.set_mode((500,600))
pygame.display.set_caption("Game from YY")
clock = pygame.time.Clock()

#input images(png)
background_image = pygame.image.load(os.path.join("img","background.png")).convert()
player_image = pygame.image.load(os.path.join("img","player.png")).convert()
rock_image = pygame.image.load(os.path.join("img","rock.png")).convert()
bullet_image = pygame.image.load(os.path.join("img","bullet.png")).convert()
rock_imgs = []
for i in range(7):
        rock_imgs.append(pygame.image.load(os.path.join("img", f"rock{i}.png")).convert())

font_name = pygame.font.match_font("arial")
def draw_text(surf, text, size, x, y):
    font= pygame.font.Font(font_name, size)
    text_surface = font.render(text, True, WHITE)
    text_rect = text_surface.get_rect()
    text.rect.centerx = x
    text_rect.top = y
    surf.blit(text_surface, text_rect)

font_name= pygame.font.match_font('arial')
def draw_text( surf, text, size, x, y):
    font = pygame.font.Font(font_name, size)
    text_surface = font.render(text, True, WHITE)
    text_rect = text_surface.get_rect()
    text_rect.centerx = x
    text_rect.top = y
    surf.blit(text_surface, text_rect)
def new_rock():
    r = Rock()
    all_sprites.add(r)
    rocks.add(r)
def draw_health(surf, hp, x, y):
    if hp < 0:
        hp = 0
    BAR_LENGTH = 100
    BAR_HEIGHT = 10
    fill = (hp/100)*BAR_LENGTH
    outline_rect = pygame.Rect(x, y, BAR_LENGTH, BAR_HEIGHT)
    fill_rect = pygame.Rect(x, y, fill, BAR_HEIGHT)
    pygame.draw.rect(surf, RED, fill_rect)
    pygame.draw.rect(surf, WHITE, outline_rect, 2)
def draw_init():
    draw_text(screen, 'Away from these cats', 30, WIDTH/2, HEIGHT/4)
    draw_text(screen, 'Press left and right to move the dog & space to throw the bullet', 15, WIDTH/2, HEIGHT/2 )
    draw_text(screen, 'press any button to start', 12, WIDTH/2, HEIGHT*3/4)
    pygame.display.update()
    waiting = True
    while waiting:
        clock.tick(FPS)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                return True
            elif event.type == pygame.KEYUP:
                waiting = False
                return False
class Player(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.transform.scale(player_image, (60, 45))
        self.image.set_colorkey(BLACK)
        self.rect = self.image.get_rect()
        self.radius = 20
        #pygame.draw.circle(self.image, RED, self.rect.center, self.radius)
        self.rect.centerx = WIDTH / 2
        self.rect.bottom = HEIGHT - 10
        self.speedx = 8
        self.health = 100
    def update(self):
        key_pressed = pygame.key.get_pressed()
        if key_pressed[pygame.K_RIGHT]:
            self.rect.x += self.speedx
        if key_pressed[pygame.K_LEFT]:
            self.rect.x -= self.speedx

        if self.rect.right > WIDTH:
            self.rect.right = WIDTH
        if self.rect.left < 0:
            self.rect.left = 0
    def shoot(self):
        bullet= Bullet(self.rect.centerx, self.rect.top)
        all_sprites.add(bullet)
        bullets.add(bullet)
class Rock(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.image_ori = random.choice(rock_imgs)
        self.image_ori.set_colorkey(WHITE)
        self.image_ori.set_colorkey(BLACK)
        self.image= self.image_ori.copy()
        self.rect = self.image.get_rect()
        self.radius= int(self.rect.width * 0.85 / 2)
        self.rect.x = random.randrange(0, WIDTH - self.rect.width)
        self.rect.y = random.randrange(-180, -100)
        self.speedy = random.randrange(2, 5)
        self.speedx = random.randrange(-3, 3)
        self.total_degree = 0
        self.rot_degree = random.randrange(-3, 3)
    def rotate(self):
         self.total_degree += self.rot_degree
         self.total_degree = self.total_degree % 360
         self.image = pygame.transform.rotate(self.image_ori, self.total_degree)
         center = self.rect.center
         self.rect = self.image.get_rect()
         self.rect.center = center

    def update(self):
        self.rotate()
        self.rect.y += self.speedy
        self.rect.x += self.speedx
        if self.rect.top > HEIGHT or self.rect.left > WIDTH or self.rect.right < 0:
            self.rect.x = random.randrange(0, WIDTH - self.rect.width)
            self.rect.y = random.randrange(-100, -40)
            self.speedy = random.randrange(2, 10)
            self.speedx = random.randrange(-3, 3)

class Bullet  (pygame.sprite.Sprite):
    def __init__(self, x, y):
        pygame.sprite.Sprite.__init__(self)
        self.image = bullet_image
        self.image.set_colorkey(BLACK)
        self.rect = self.image.get_rect()
        self.rect.centerx = x
        self.rect.bottom = y
        self.speedy = -10

    def update(self):
        self.rect.y += self.speedy
        if self.rect.bottom < 0:
            self.kill()


all_sprites = pygame.sprite.Group()
rocks = pygame.sprite.Group()
bullets = pygame.sprite.Group()
player = Player()
all_sprites.add(player)
rock = Rock()
all_sprites.add(rock)
for i in range(8):
    new_rock()
score = 0

show_init = True
#game loop process input>
running=True
while running:
    if show_init:
        close = draw_init()
        if close:
            break
        show_init = False
    # in 1 second the time only can be processed 10 times #FPS fresh the game 60 times per second
    clock.tick(FPS)
    #aquire input
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE:
                player.shoot()
    #updating game
    all_sprites.update()
    hits = pygame.sprite.groupcollide(rocks, bullets, True, True)
    for hit in hits:
        score += hit.radius
        new_rock()

    hits = pygame.sprite.spritecollide(player, rocks, True, pygame.sprite.collide_circle)
    for hits in hits:
        new_rock()
        player.health -= hits.radius
        if player.health <= 0:
            running = False
    #monitor RED, GREEN , BLUE 0~255 THE BIGGER THE NUMBER IS THE COLOR IS MORE HEAVIER
    #screen.fill((R,G,B))
    screen.fill(BLACK)
    screen.blit(background_image, (0, 0))
    all_sprites.draw(screen)
    draw_text(screen, str(score), 18, WIDTH/2, 10)
    draw_health(screen, player.health, 5, 15)
    pygame.display.update()

pygame.quit()
